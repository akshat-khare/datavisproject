\begin{sphinxtheindex}
\def\bigletter#1{{\Large\sffamily#1}\nopagebreak\vspace{1mm}}

  \bigletter A
  \item aggregate() (ingest\_raw.Ingest method), \hyperpage{27}
  \item answer\_queries() (in module query\_answering), \hyperpage{54}
  \item answer\_queries\_par() (in module query\_answering), \hyperpage{55}
  \item answer\_query() (in module query\_answering), \hyperpage{55}
  \item args (kafka\_tweets\_producer.ServiceExit attribute), \hyperpage{11}
  \item authkey (ingest\_raw.Timer attribute), \hyperpage{27}

  \indexspace
  \bigletter C
  \item calculate\_sentiment (in module ingest\_raw), \hyperpage{28}
  \item cancel() (ingest\_raw.Timer method), \hyperpage{27}
  \item cancel\_job() (flink\_api.FlinkAPI method), \hyperpage{49}
  \item check\_job\_status\_all() (flink\_api.FlinkAPI method), \hyperpage{49}
  \item clear\_db() (execute\_queries.MongoQuery method), \hyperpage{34}
  \item clear\_db() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item clear\_db() (ingest\_raw.Ingest method), \hyperpage{27}
  \item clear\_everyting() (userstimeline.UserTimelineAPI method), \hyperpage{7}
  \item clear\_graph() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item close() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item close\_session() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item close\_session() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item compile\_code() (flink\_code\_gen.FlinkCodeGenerator method), \hyperpage{48}
  \item conditional\_create() (generate\_queries.CreateQuery method), \hyperpage{31}
  \item configure\_new\_file() (streaming.Logger method), \hyperpage{9}
  \item create\_constraint() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item create\_constraints() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item create\_dag (module), \hyperpage{43}
  \item create\_indexes() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item create\_query() (generate\_queries.CreateQuery method), \hyperpage{31}
  \item create\_tweet() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item CreateQuery (class in generate\_queries), \hyperpage{31}

  \indexspace
  \bigletter D
  \item daemon (ingest\_raw.Timer attribute), \hyperpage{27}
  \item DAG (class in create\_dag), \hyperpage{44}
  \item DateTimeEncoder (class in userstimeline), \hyperpage{6}
  \item default() (userstimeline.DateTimeEncoder method), \hyperpage{6}
  \item delete\_code() (flink\_code\_gen.FlinkCodeGenerator method), \hyperpage{48}
  \item drop\_constraint() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}

  \indexspace
  \bigletter E
  \item encode() (userstimeline.DateTimeEncoder method), \hyperpage{6}
  \item execute\_queries (module), \hyperpage{34}
  \item exit() (ingest\_raw.Ingest method), \hyperpage{27}
  \item exitcode (ingest\_raw.Timer attribute), \hyperpage{27}
  \item extract\_hash\_tags() (in module userstimeline), \hyperpage{8}

  \indexspace
  \bigletter F
  \item feed\_forward() (create\_dag.DAG method), \hyperpage{45}
  \item fetch\_persist\_friends\_and\_followers() (userstimeline.UserTimelineAPI method), 
		\hyperpage{7}
  \item fetch\_persist\_tweets() (userstimeline.UserTimelineAPI method), \hyperpage{7}
  \item fetch\_persist\_users() (userstimeline.UserTimelineAPI method), \hyperpage{7}
  \item finish\_current\_file() (streaming.Logger method), \hyperpage{9}
  \item flatten\_json() (in module ingest\_neo4j\_streaming), \hyperpage{20}
  \item flatten\_json() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item flink\_api (module), \hyperpage{49}
  \item flink\_code\_gen (module), \hyperpage{48}
  \item FlinkAPI (class in flink\_api), \hyperpage{49}
  \item FlinkCodeGenerator (class in flink\_code\_gen), \hyperpage{48}

  \indexspace
  \bigletter G
  \item generate\_dag() (create\_dag.DAG method), \hyperpage{45}
  \item generate\_node() (generate\_queries.CreateQuery method), \hyperpage{32}
  \item generate\_queries (module), \hyperpage{31}
  \item generate\_random\_queries() (in module query\_answering), \hyperpage{55}
  \item get\_constraints() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item get\_drawable\_dag() (create\_dag.DAG method), \hyperpage{45}
  \item get\_profile() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item get\_user\_screen\_names() (in module userstimeline), \hyperpage{8}
  \item getDateFromTimestamp() (in module ingest\_neo4j\_streaming), \hyperpage{20}
  \item getDateFromTimestamp() (in module ingest\_raw), \hyperpage{28}
  \item getFrameStartEndTime() (in module ingest\_neo4j\_streaming), \hyperpage{20}
  \item getFrameStartEndTime() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}

  \indexspace
  \bigletter H
  \item ht\_in\_interval() (execute\_queries.MongoQuery method), \hyperpage{34}
  \item ht\_with\_sentiment() (execute\_queries.MongoQuery method), \hyperpage{34}

  \indexspace
  \bigletter I
  \item ident (ingest\_raw.Timer attribute), \hyperpage{28}
  \item Ingest (class in ingest\_raw), \hyperpage{27}
  \item ingest\_neo4j\_streaming (module), \hyperpage{18}
  \item ingest\_neo4j\_user\_timeline (module), \hyperpage{20}
  \item ingest\_raw (module), \hyperpage{26}
  \item insert\_records() (in module kafka\_flink\_alerts\_consumer), \hyperpage{49}
  \item insert\_tweet() (ingest\_neo4j\_streaming.Twitter method), \hyperpage{19}
  \item insert\_tweet() (ingest\_raw.Ingest method), \hyperpage{27}
  \item is\_alive() (ingest\_raw.Timer method), \hyperpage{28}
  \item item\_separator (userstimeline.DateTimeEncoder attribute), \hyperpage{6}
  \item iterencode() (userstimeline.DateTimeEncoder method), \hyperpage{6}

  \indexspace
  \bigletter J
  \item join() (ingest\_raw.Timer method), \hyperpage{28}

  \indexspace
  \bigletter K
  \item kafka\_flink\_alerts\_consumer (module), \hyperpage{49}
  \item kafka\_tweets\_producer (module), \hyperpage{11}
  \item key\_separator (userstimeline.DateTimeEncoder attribute), \hyperpage{7}

  \indexspace
  \bigletter L
  \item log() (in module ingest\_neo4j\_streaming), \hyperpage{20}
  \item log() (in module ingest\_neo4j\_user\_timeline), \hyperpage{21}
  \item log() (streaming.Logger method), \hyperpage{9}
  \item Logger (class in streaming), \hyperpage{9}

  \indexspace
  \bigletter M
  \item MongoQuery (class in execute\_queries), \hyperpage{34}
  \item mp\_ht\_in\_interval() (execute\_queries.MongoQuery method), \hyperpage{35}
  \item mp\_ht\_in\_total() (execute\_queries.MongoQuery method), \hyperpage{35}
  \item mp\_um\_in\_total() (execute\_queries.MongoQuery method), \hyperpage{35}
  \item my\_favourites\_fetcher() (userstimeline.UserTimelineAPI method), \hyperpage{7}
  \item my\_followers\_fetcher() (userstimeline.UserTimelineAPI method), \hyperpage{7}
  \item my\_friends\_fetcher() (userstimeline.UserTimelineAPI method), \hyperpage{8}
  \item my\_tweet\_fetcher() (userstimeline.UserTimelineAPI method), \hyperpage{8}
  \item my\_user\_fetcher() (userstimeline.UserTimelineAPI method), \hyperpage{8}

  \indexspace
  \bigletter N
  \item name (ingest\_raw.Timer attribute), \hyperpage{28}
  \item Neo4jIngestion\_UserTimeline (class in ingest\_neo4j\_user\_timeline), \hyperpage{21}

  \indexspace
  \bigletter P
  \item pid (ingest\_raw.Timer attribute), \hyperpage{28}
  \item plot\_dag() (create\_dag.DAG method), \hyperpage{45}
  \item plot\_user\_field() (in module userstimeline), \hyperpage{8}
  \item populate() (ingest\_raw.Ingest method), \hyperpage{27}
  \item Producer (class in kafka\_tweets\_producer), \hyperpage{11}

  \indexspace
  \bigletter Q
  \item query\_answering (module), \hyperpage{54}

  \indexspace
  \bigletter R
  \item read\_tweets() (in module ingest\_neo4j\_streaming), \hyperpage{20}
  \item read\_tweets() (in module ingest\_raw), \hyperpage{28}
  \item readDataAndCreateGraph() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item run() (ingest\_raw.Timer method), \hyperpage{28}
  \item run\_jar() (flink\_api.FlinkAPI method), \hyperpage{49}

  \indexspace
  \bigletter S
  \item sentinel (ingest\_raw.Timer attribute), \hyperpage{28}
  \item service\_shutdown() (in module kafka\_tweets\_producer), \hyperpage{11}
  \item ServiceExit, \hyperpage{11}
  \item signal\_handler() (in module streaming), \hyperpage{9}
  \item simulateExample() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item start() (ingest\_raw.Timer method), \hyperpage{28}
  \item streaming (module), \hyperpage{8}
  \item sync\_session() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}

  \indexspace
  \bigletter T
  \item terminate() (ingest\_raw.Timer method), \hyperpage{28}
  \item threaded() (in module ingest\_raw), \hyperpage{28}
  \item Timer (class in ingest\_raw), \hyperpage{27}
  \item Twitter (class in ingest\_neo4j\_streaming), \hyperpage{18}

  \indexspace
  \bigletter U
  \item update\_followers() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item update\_friends() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item update\_user() (ingest\_neo4j\_user\_timeline.Neo4jIngestion\_UserTimeline method), 
		\hyperpage{21}
  \item upload\_jar() (flink\_api.FlinkAPI method), \hyperpage{49}
  \item userstimeline (module), \hyperpage{6}
  \item UserTimelineAPI (class in userstimeline), \hyperpage{7}

  \indexspace
  \bigletter W
  \item wait\_for\_rate\_limit() (userstimeline.UserTimelineAPI method), \hyperpage{8}
  \item with\_traceback() (kafka\_tweets\_producer.ServiceExit method), \hyperpage{11}
  \item worker() (ingest\_raw.Ingest method), \hyperpage{27}
  \item write\_code() (flink\_code\_gen.FlinkCodeGenerator method), \hyperpage{48}
  \item write\_tweet() (streaming.Logger method), \hyperpage{9}

\end{sphinxtheindex}
